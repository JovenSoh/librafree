{"version":3,"sources":["../node_modules/keyv/src sync","../node_modules/http2/lib/protocol sync","preprocess.js","components/isValidIsbn.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","preprocessImage","canvas","image","getContext","getImageData","width","height","pixels","level","undefined","thresh","Math","floor","i","length","value","thresholdFilter","data","isValidIsbn","str","sum","weight","digit","check","replace","parseInt","toUpperCase","axios","require","App","useState","file","setFile","text","setText","isbn","setIsbn","author","setAuthor","title","setTitle","canvasRef","useRef","imageRef","getBook","console","log","words","possibleISBN","substr","toString","request","get","then","response","authorId","authors","key","name","options","mirror","query","count","sort_by","reverse","libgen","search","err","accept","type","onChange","event","URL","createObjectURL","target","files","onFileChange","onClick","current","naturalHeight","naturalWidth","ctx","clearRect","drawImage","putImageData","dataUrl","toDataURL","Tesseract","recognize","logger","m","langPath","catch","error","result","onFileUpload","className","src","ref","fileDetails","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1a11bfa.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 194;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 213;","function preprocessImage(canvas) {\r\n    const level = 0.5;\r\n    const radius = 1;\r\n    const ctx = canvas.getContext('2d');\r\n    const image = ctx.getImageData(0,0,canvas.width, canvas.height);\r\n    //blurARGB(image.data, canvas, radius);\r\n    //dilate(image.data, canvas);\r\n    //invertColors(image.data);\r\n    thresholdFilter(image.data, level);\r\n    return image;\r\n   }\r\n\r\nexport default preprocessImage\r\n\r\n // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\r\n function thresholdFilter(pixels, level) {\r\n    if (level === undefined) {\r\n    level = 0.5;\r\n    }\r\n    const thresh = Math.floor(level * 255);\r\n    for (let i = 0; i < pixels.length; i += 4) {\r\n    const red = pixels[i];\r\n    const green = pixels[i + 1];\r\n    const blue = pixels[i + 2];\r\n    \r\n    const gray = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\r\n    let value;\r\n    if (gray >= thresh) {\r\n        value = 255;\r\n    } else {\r\n        value = 0;\r\n    }\r\n    pixels[i] = pixels[i + 1] = pixels[i + 2] = value;\r\n    }\r\n  }\r\n\r\nfunction getARGB (data, i) {\r\n    const offset = i * 4;\r\n    return (\r\n      ((data[offset + 3] << 24) & 0xff000000) |\r\n      ((data[offset] << 16) & 0x00ff0000) |\r\n      ((data[offset + 1] << 8) & 0x0000ff00) |\r\n      (data[offset + 2] & 0x000000ff)\r\n    );\r\n  };\r\n\r\n  function setPixels (pixels, data) {\r\n    let offset = 0;\r\n    for (let i = 0, al = pixels.length; i < al; i++) {\r\n      offset = i * 4;\r\n      pixels[offset + 0] = (data[i] & 0x00ff0000) >>> 16;\r\n      pixels[offset + 1] = (data[i] & 0x0000ff00) >>> 8;\r\n      pixels[offset + 2] = data[i] & 0x000000ff;\r\n      pixels[offset + 3] = (data[i] & 0xff000000) >>> 24;\r\n    }\r\n  };\r\n\r\n \r\n  // internal kernel stuff for the gaussian blur filter\r\n  let blurRadius;\r\n  let blurKernelSize;\r\n  let blurKernel;\r\n  let blurMult;\r\n  \r\n  // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\r\n  function buildBlurKernel(r) {\r\n  let radius = (r * 3.5) | 0;\r\n  radius = radius < 1 ? 1 : radius < 248 ? radius : 248;\r\n  \r\n  if (blurRadius !== radius) {\r\n    blurRadius = radius;\r\n    blurKernelSize = (1 + blurRadius) << 1;\r\n    blurKernel = new Int32Array(blurKernelSize);\r\n    blurMult = new Array(blurKernelSize);\r\n    for (let l = 0; l < blurKernelSize; l++) {\r\n      blurMult[l] = new Int32Array(256);\r\n    }\r\n  \r\n    let bk, bki;\r\n    let bm, bmi;\r\n  \r\n    for (let i = 1, radiusi = radius - 1; i < radius; i++) {\r\n      blurKernel[radius + i] = blurKernel[radiusi] = bki = radiusi * radiusi;\r\n      bm = blurMult[radius + i];\r\n      bmi = blurMult[radiusi--];\r\n      for (let j = 0; j < 256; j++) {\r\n        bm[j] = bmi[j] = bki * j;\r\n      }\r\n    }\r\n    bk = blurKernel[radius] = radius * radius;\r\n    bm = blurMult[radius];\r\n  \r\n    for (let k = 0; k < 256; k++) {\r\n      bm[k] = bk * k;\r\n    }\r\n  }\r\n  }\r\n\r\n// from https://github.com/processing/p5.js/blob/main/src/image/filters.js\r\n  function blurARGB(pixels, canvas, radius) {\r\n  const width = canvas.width;\r\n  const height = canvas.height;\r\n  const numPackedPixels = width * height;\r\n  const argb = new Int32Array(numPackedPixels);\r\n  for (let j = 0; j < numPackedPixels; j++) {\r\n    argb[j] = getARGB(pixels, j);\r\n  }\r\n  let sum, cr, cg, cb, ca;\r\n  let read, ri, ym, ymi, bk0;\r\n  const a2 = new Int32Array(numPackedPixels);\r\n  const r2 = new Int32Array(numPackedPixels);\r\n  const g2 = new Int32Array(numPackedPixels);\r\n  const b2 = new Int32Array(numPackedPixels);\r\n  let yi = 0;\r\n  buildBlurKernel(radius);\r\n  let x, y, i;\r\n  let bm;\r\n  for (y = 0; y < height; y++) {\r\n    for (x = 0; x < width; x++) {\r\n      cb = cg = cr = ca = sum = 0;\r\n      read = x - blurRadius;\r\n      if (read < 0) {\r\n        bk0 = -read;\r\n        read = 0;\r\n      } else {\r\n        if (read >= width) {\r\n          break;\r\n        }\r\n        bk0 = 0;\r\n      }\r\n      for (i = bk0; i < blurKernelSize; i++) {\r\n        if (read >= width) {\r\n          break;\r\n        }\r\n        const c = argb[read + yi];\r\n        bm = blurMult[i];\r\n        ca += bm[(c & -16777216) >>> 24];\r\n        cr += bm[(c & 16711680) >> 16];\r\n        cg += bm[(c & 65280) >> 8];\r\n        cb += bm[c & 255];\r\n        sum += blurKernel[i];\r\n        read++;\r\n      }\r\n      ri = yi + x;\r\n      a2[ri] = ca / sum;\r\n      r2[ri] = cr / sum;\r\n      g2[ri] = cg / sum;\r\n      b2[ri] = cb / sum;\r\n    }\r\n    yi += width;\r\n  }\r\n  yi = 0;\r\n  ym = -blurRadius;\r\n  ymi = ym * width;\r\n  for (y = 0; y < height; y++) {\r\n    for (x = 0; x < width; x++) {\r\n      cb = cg = cr = ca = sum = 0;\r\n      if (ym < 0) {\r\n        bk0 = ri = -ym;\r\n        read = x;\r\n      } else {\r\n        if (ym >= height) {\r\n          break;\r\n        }\r\n        bk0 = 0;\r\n        ri = ym;\r\n        read = x + ymi;\r\n      }\r\n      for (i = bk0; i < blurKernelSize; i++) {\r\n        if (ri >= height) {\r\n          break;\r\n        }\r\n        bm = blurMult[i];\r\n        ca += bm[a2[read]];\r\n        cr += bm[r2[read]];\r\n        cg += bm[g2[read]];\r\n        cb += bm[b2[read]];\r\n        sum += blurKernel[i];\r\n        ri++;\r\n        read += width;\r\n      }\r\n      argb[x + yi] =\r\n        ((ca / sum) << 24) |\r\n        ((cr / sum) << 16) |\r\n        ((cg / sum) << 8) |\r\n        (cb / sum);\r\n    }\r\n    yi += width;\r\n    ymi += width;\r\n    ym++;\r\n  }\r\n  setPixels(pixels, argb);\r\n  }\r\n\r\nfunction invertColors(pixels) {\r\n    for (var i = 0; i < pixels.length; i+= 4) {\r\n      pixels[i] = pixels[i] ^ 255; // Invert Red\r\n      pixels[i+1] = pixels[i+1] ^ 255; // Invert Green\r\n      pixels[i+2] = pixels[i+2] ^ 255; // Invert Blue\r\n    }\r\n  }\r\n\r\n\r\n// from https://github.com/processing/p5.js/blob/main/src/image/filters.js\r\n  function dilate(pixels, canvas) {\r\n   let currIdx = 0;\r\n   const maxIdx = pixels.length ? pixels.length / 4 : 0;\r\n   const out = new Int32Array(maxIdx);\r\n   let currRowIdx, maxRowIdx, colOrig, colOut, currLum;\r\n  \r\n   let idxRight, idxLeft, idxUp, idxDown;\r\n   let colRight, colLeft, colUp, colDown;\r\n   let lumRight, lumLeft, lumUp, lumDown;\r\n  \r\n   while (currIdx < maxIdx) {\r\n     currRowIdx = currIdx;\r\n     maxRowIdx = currIdx + canvas.width;\r\n     while (currIdx < maxRowIdx) {\r\n       colOrig = colOut = getARGB(pixels, currIdx);\r\n       idxLeft = currIdx - 1;\r\n       idxRight = currIdx + 1;\r\n       idxUp = currIdx - canvas.width;\r\n       idxDown = currIdx + canvas.width;\r\n  \r\n       if (idxLeft < currRowIdx) {\r\n         idxLeft = currIdx;\r\n       }\r\n       if (idxRight >= maxRowIdx) {\r\n         idxRight = currIdx;\r\n       }\r\n       if (idxUp < 0) {\r\n         idxUp = 0;\r\n       }\r\n       if (idxDown >= maxIdx) {\r\n         idxDown = currIdx;\r\n       }\r\n       colUp = getARGB(pixels, idxUp);\r\n       colLeft = getARGB(pixels, idxLeft);\r\n       colDown = getARGB(pixels, idxDown);\r\n       colRight = getARGB(pixels, idxRight);\r\n  \r\n       //compute luminance\r\n       currLum =\r\n         77 * ((colOrig >> 16) & 0xff) +\r\n         151 * ((colOrig >> 8) & 0xff) +\r\n         28 * (colOrig & 0xff);\r\n       lumLeft =\r\n         77 * ((colLeft >> 16) & 0xff) +\r\n         151 * ((colLeft >> 8) & 0xff) +\r\n         28 * (colLeft & 0xff);\r\n       lumRight =\r\n         77 * ((colRight >> 16) & 0xff) +\r\n         151 * ((colRight >> 8) & 0xff) +\r\n         28 * (colRight & 0xff);\r\n       lumUp =\r\n         77 * ((colUp >> 16) & 0xff) +\r\n         151 * ((colUp >> 8) & 0xff) +\r\n         28 * (colUp & 0xff);\r\n       lumDown =\r\n         77 * ((colDown >> 16) & 0xff) +\r\n         151 * ((colDown >> 8) & 0xff) +\r\n         28 * (colDown & 0xff);\r\n  \r\n       if (lumLeft > currLum) {\r\n         colOut = colLeft;\r\n         currLum = lumLeft;\r\n       }\r\n       if (lumRight > currLum) {\r\n         colOut = colRight;\r\n         currLum = lumRight;\r\n       }\r\n       if (lumUp > currLum) {\r\n         colOut = colUp;\r\n         currLum = lumUp;\r\n       }\r\n       if (lumDown > currLum) {\r\n         colOut = colDown;\r\n         currLum = lumDown;\r\n       }\r\n       out[currIdx++] = colOut;\r\n     }\r\n   }\r\n   setPixels(pixels, out);\r\n  };\r\n  ","function isValidIsbn(str) {\r\n    var sum,\r\n        weight,\r\n        digit,\r\n        check,\r\n        i;\r\n\r\n    str = str.replace(/[^0-9X]/gi, '');\r\n\r\n    if (str.length != 10 && str.length != 13) {\r\n        return false;\r\n    }\r\n\r\n    if (str.length == 13) {\r\n        sum = 0;\r\n        for (i = 0; i < 12; i++) {\r\n            digit = parseInt(str[i]);\r\n            if (i % 2 == 1) {\r\n                sum += 3*digit;\r\n            } else {\r\n                sum += digit;\r\n            }\r\n        }\r\n        check = (10 - (sum % 10)) % 10;\r\n        return (check == str[str.length-1]);\r\n    }\r\n\r\n    if (str.length == 10) {\r\n        weight = 10;\r\n        sum = 0;\r\n        for (i = 0; i < 9; i++) {\r\n            digit = parseInt(str[i]);\r\n            sum += weight*digit;\r\n            weight--;\r\n        }\r\n        check = (11 - (sum % 11)) % 11\r\n        if (check == 10) {\r\n            check = 'X';\r\n        }\r\n        return (check == str[str.length-1].toUpperCase());\r\n    }\r\n  }\r\nexport default isValidIsbn\r\n","import Tesseract from 'tesseract.js';\nimport {useState, useRef} from 'react';\nimport preprocessImage from './preprocess';\nimport libgen from \"libgen\";\nimport isValidIsbn from './components/isValidIsbn';\nimport './App.css'\n\n\nconst axios = require('axios')\n\nfunction App() {\n  const [file, setFile] = useState(\"\")\n  const [text, setText] = useState(\"\")\n  const [isbn, setIsbn] = useState('')\n  const [author, setAuthor] = useState(\"\")\n  const [title, setTitle] = useState(\"\")\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n\n  const onFileChange = (event) => {\n    setFile(URL.createObjectURL(event.target.files[0]))\n    console.log(\"file:\", event.target.files[0])\n  }\n\n  const onFileUpload = () => {\n    const canvas = canvasRef.current;\n    canvas.height = imageRef.current.naturalHeight\n    canvas.width = imageRef.current.naturalWidth\n    const ctx = canvas.getContext('2d');\n    console.log(\"imageRef: \", imageRef)\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.drawImage(imageRef.current, 0, 0);\n    ctx.putImageData(preprocessImage(canvas),0,0);\n    const dataUrl = canvas.toDataURL(\"image/jpeg\");\n\n    Tesseract.recognize(\n      dataUrl,'eng',\n      { \n        logger: m => console.log(m),\n        langPath: \"https://tessdata.projectnaptha.com/4.0.0_best/eng.traineddata.gz\",\n      }\n    )\n    .catch (err => {\n      console.error(err);\n    })\n    .then(result => {\n     setText(result.data.text)\n     getBook(result.data.text)\n    })\n  }\n\n  const fileDetails = () => {\n    if (file){\n      return(\n        <div>\n          <p>Text: {text}</p>\n          <p>Title: {title} </p>\n          <p>Author: {author} </p>\n          <p>ISBN: {isbn}</p>\n        </div>\n      )\n    }\n  }\n\n\n  const getBook = (text) => {\n    console.log(\"Text: \", text )\n    //get isbn from ocr\n    var words = text.replace(/[^0-9]/g,'') //using regex to get isbn, filters out all non-numbers\n\n    for (let i = 0; i < (words.length-12); i++) {\n      var possibleISBN = (words.substr(i,13)).toString()\n      if (possibleISBN[0] == 9 && isValidIsbn(possibleISBN)) {\n        setIsbn(possibleISBN)\n        var isbn = possibleISBN\n      }\n\n    }\n    //api call to get book details\n    let request = axios.get(`https://openlibrary.org/isbn/${isbn}.json`)\n    //get book title\n    request.then(response => {\n      setTitle(response.data.title)\n      let authorId = response.data.authors[0].key\n      //get book author\n      request = axios.get(`https://openlibrary.org${authorId}.json`)\n        return request.then(response => {\n          setAuthor(response.data.name)\n    })\n    })\n\n    //using libgen to get book download\n    \n    const options = {\n      mirror: 'http://libgen.is',\n      query: title,\n      count: 5,\n      sort_by: 'year',\n      reverse: true\n    }\n\n    libgen.search(options,(err,data) => {\n      console.log(\"hello\")\n    })\n\n\n  }\n\n\n  \n\n  return (\n    <div>\n        <h1> OCR </h1>\n        <input accept=\"image/*\" type='file' onChange={(event) => onFileChange(event)} />\n        <button onClick={(file) => onFileUpload(file)}>\n          Upload\n        </button>\n      <div className='ocr'>\n        <div className='ocr-col1'>\n          <h3>Chosen picture</h3>\n          <img src={file} ref={imageRef} className='App-img'/>\n          {fileDetails()}\n        </div>\n        <div className='ocr-col2'>\n          <h3>Canvas</h3>\n          <canvas ref={canvasRef} />\n        </div>\n        \n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}